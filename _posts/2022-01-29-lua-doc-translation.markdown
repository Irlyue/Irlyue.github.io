---
toc: true
toc_label: "Contents"
toc_icon: "columns"
toc_sticky: true
layout: single
title: "lua53文档翻译"
date: 2022-01-29 11:55:00 +0800
categories: lua
---

# 简介
lua是一门强大、高效、轻便而且可嵌入的脚本语言。它支持过程式编程、面向对象编程、函数式编程、数据驱动编程和数据描述。

lua将简单的过程式语法跟其强大的数据表述结构结合起来。lua是一门动态类型语言，通过一个基于寄存器的虚拟机解析字节码运行，并且有着增量式垃圾收集的自主内存管理功能，这使得lua非常适合用于配置、脚本编程和快速原型迭代。

lua本质上是用clean C（标准C和C++的公共子集）实现的一个库。lua的发布包里面包含来一个宿主程序`lua`，这个宿主程序利用lua库提供一个完整独立的lua解释器，可用于交互式或者批量执行代码。lua可作为一个强大、轻便、嵌入式的脚本语言被其他任何程序使用，同时也可作为一个轻便高效的独立语言来使用。

作为一门可扩展语言，lua没有主函数这种概念：它通过把自己嵌入到一个宿主程序中工作（这个宿主程序称为嵌入程序或者简称为宿主，通常情况下这个宿主就是那个独立的lua解释器）。宿主程序可以调用函数来执行lua代码，也可以读取和写入lua变量，还可以注册C函数供lua代码调用。通过C函数的使用，可以扩充lua语言以应用于多种领域，因而创造出共享语法框架的个性化编程语言。

lua是一个免费软件，也不提供任何担保。本文档介绍的lua实现可以在lua的官方网站www.lua.org上获取到。

就像其他语言的参考文档一样，这篇文档也不例外，在很多地方都会比较枯燥。关于lua设计背后的思想，可以阅读lua网站上的技术论文。要想更详细地了解lua编程，可以看看Roerto写的“programming in lua”这本书。

# 基本概念
这一章节介绍lua语言的基本概念。

## 值与类型
lua是一门动态类型语言。这意味着变量是没有类型的，只有值才会有类型。lua里是没有类型定义的。所有的值携带着它们自己的类型。